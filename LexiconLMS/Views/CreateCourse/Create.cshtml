@model LexiconLMS.Models.CreateCourseViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm("CreateCourse", "CreateCourse", FormMethod.Post, new { @id = "courseForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Course.Id, new { @id = "courseHiddenId" }) @*<--- Added for edit to work*@
    <div class="form-horizontal">
        <br />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Course.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Course.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Course.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Course.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Course.Description, new { @class = "form-control", @rows = 3, @style = "resize: none;" })
                @Html.ValidationMessageFor(model => model.Course.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Course.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Course.StartDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.Course.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Course.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Course.EndDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.Course.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <br />
        <div class="form-group">
            <div class="col-md-3">
                @Html.ActionLink("Avsluta utan att spara", "Index")
            </div>
            <div class="col-md-offset-3 col-md-3">
                @Html.ActionLink("Spara och lägg till moduler", "../Modules/List/1")
            </div>
            <div class="col-md-3">
                <input type="submit" value="Spara och avsluta" class="btn btn-default" />
            </div>
            @if (Model.Course != null)
            {
                <div class="col-md-3">
                    <input id="createNew" type="button" value="Skapa ny kurs" class="btn btn-default" />
                </div>
            }
        </div>
    </div>
}

<script src="~/Scripts/jquery-3.1.1.min.js"></script>
<script>
    $("#createNew").on("click", function () {
        $("#courseHiddenId").val = 0;
        $("#courseForm").submit();
    });
</script>


<hr />
<hr />
<hr />
<hr />
<hr />
<hr />

@using (Html.BeginForm("CreateModule", "CreateCourse", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(x => x.ModuleModel.CourseId)

    if (Model.ModuleModel.Module != null)
    {
        @Html.HiddenFor(x => x.ModuleModel.Module.Id)
    }

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ModuleModel.Module.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModuleModel.Module.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ModuleModel.Module.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ModuleModel.Module.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModuleModel.Module.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ModuleModel.Module.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ModuleModel.Module.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModuleModel.Module.StartDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.ModuleModel.Module.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ModuleModel.Module.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModuleModel.Module.EndDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.ModuleModel.Module.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@( ((Model.ModuleModel.Module != null) ? "Spara ändringar" : "Lägg till") )" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@if (Model.ModuleModel.Modules != null)
{
    <table class="table">
        <tr>
            <th>@Html.DisplayNameFor(x => x.ModuleModel.Module.Name)</th>
            <th>@Html.DisplayNameFor(x => x.ModuleModel.Module.Description)</th>
            <th>@Html.DisplayNameFor(x => x.ModuleModel.Module.StartDate)</th>
            <th>@Html.DisplayNameFor(x => x.ModuleModel.Module.EndDate)</th>
            <th></th>
            <th></th>
        </tr>
        @foreach (var module in Model.ModuleModel.Modules)
        {
            <tr>
                <td>@Html.DisplayFor(x => module.Name)</td>
                <td>@Html.DisplayFor(x => module.Description)</td>
                <td>@Html.DisplayFor(x => module.StartDate)</td>
                <td>@Html.DisplayFor(x => module.EndDate)</td>
                <td>@Html.ActionLink("Redigera", "Create", new { courseId = Model.ModuleModel.CourseId, moduleId = module.Id })</td>
                <td>@Html.ActionLink("Ta bort", "Delete", new { Id = module.Id })</td>
            </tr>
        }
    </table>
}


<hr />
<hr />
<hr />
<hr />
<hr />
<hr />


@using (Html.BeginForm("CreateActivity", "CreateCourse", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(x => x.ActivityModel.CourseId)

    if (Model.ActivityModel.Activity != null)
    {
        @Html.HiddenFor(x => x.ActivityModel.Activity.Id)
    }

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ActivityModel.Activity.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ActivityModel.Activity.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ActivityModel.Activity.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActivityModel.Activity.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ActivityModel.Activity.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ActivityModel.Activity.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActivityModel.Activity.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ActivityModel.Activity.StartTime, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.ActivityModel.Activity.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActivityModel.Activity.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ActivityModel.Activity.EndTime, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.ActivityModel.Activity.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.ActivityModel.Modules != null)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.ActivityModel.Activity.Module, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ActivityModel.Activity.ModuelId", Model.ActivityModel.ModuleList, "", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ActivityModel.Activity.Module, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ActivityModel.Activity.Type, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ActivityModel.Activity.TypeId", Model.ActivityModel.Types, "", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ActivityModel.Activity.Type, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="@( ((Model.ActivityModel.Activity != null) ? "Spara ändringar" : "Lägg till") )" class="btn btn-default" />
                </div>
            </div>
        }
    </div>
}
@if (Model.ActivityModel.Modules != null)
{
    foreach (var module in Model.ActivityModel.Modules)
    {
        <h3>@Html.DisplayFor(x => module.Name)</h3>

        <table class="table">

            <tr>
                <th>@Html.DisplayNameFor(x => module.Activities.First().Type.Name)</th>
                <th>@Html.DisplayNameFor(x => module.Activities.First().Name)</th>
                <th>@Html.DisplayNameFor(x => module.Activities.First().Description)</th>
                <th>@Html.DisplayNameFor(x => module.Activities.First().StartTime)</th>
                <th>@Html.DisplayNameFor(x => module.Activities.First().EndTime)</th>
                <th></th>
                <th></th>
            </tr>

            @foreach (var activity in module.Activities.OrderByDescending(x => x.Id))
            {
                <tr>
                    <td>@Html.DisplayFor(x => activity.Type.Name)</td>
                    <td>@Html.DisplayFor(x => activity.Name)</td>
                    <td>@Html.DisplayFor(x => activity.Description)</td>
                    <td>@Html.DisplayFor(x => activity.StartTime)</td>
                    <td>@Html.DisplayFor(x => activity.EndTime)</td>
                    <td>@Html.ActionLink("Redigera", "Create", new { courseId = Model.ActivityModel.CourseId, activityId = activity.Id })</td>
                    <td>@Html.ActionLink("Ta bort", "Delete", new { Id = activity.Id })</td>
                </tr>
            }
        </table>
    }
}


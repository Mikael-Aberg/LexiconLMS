@model LexiconLMS.Models.CreateCourseViewModel

@{
    ViewBag.Title = "Create";
}

<div class="panel-group" id="accordion">
    <div class="panel panel-default">
        <a data-toggle="collapse" data-parent="#accordion" href="#collapseCourse" class="accordion-header-link">
            <div class="panel-heading">
                <h4 class="panel-title">
                    Kurs @( ((Model.Course != null) ? ": " + Model.Course.Name : "") )
                </h4>
            </div>
        </a>
        <div id="collapseCourse" class="panel-collapse collapse @Model.CourseIn">
            <div class="panel-body">
                @using (Html.BeginForm("CreateCourse", "CreateCourse", FormMethod.Post, new { @id = "courseForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-group">
                        @if (Model.Course != null)
                        {
                            <input id="courseId" name="courseId" type="hidden" value="@Model.Course.Id" />
                        }
                    </div>
                    <div class="form-horizontal">
                        <br />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.Course.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Course.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Course.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Course.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.Course.Description, new { @class = "form-control", @rows = 3, @style = "resize: none;" })
                                @Html.ValidationMessageFor(model => model.Course.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Course.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Course.StartDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                                @Html.ValidationMessageFor(model => model.Course.StartDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Course.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Course.EndDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                                @Html.ValidationMessageFor(model => model.Course.EndDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="btn-group form-group" id="courseButtons">

                            <input type="submit" value="Spara och lägg till moduler" class="btn btn-default" />

                            @if (Model.Course != null)
                            {
                                <input id="createNew" type="button" value="Skapa ny kurs" class="btn btn-default" />
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="panel panel-default">
        <a data-toggle="collapse" data-parent="#accordion" href="#collapseModule" class="accordion-header-link">
            <div class="panel-heading">
                <h4 class="panel-title">
                    Moduler
                </h4>
            </div>
        </a>
        <div id="collapseModule" class="panel-collapse collapse @Model.ModuleIn">
            <div class="panel-body">
                @using (Html.BeginForm("CreateModule", "CreateCourse", FormMethod.Post, new { @id = "ModuleForm" }))
                {
                    <div id="moduleDiv">
                        @if (Model.Course != null)
                        {
                            @Html.Action("CreateModuleInput", new { courseId = Model.Course.Id })
                        }
                    </div>
                    if (Model.Course != null)
                    {
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input id="ModuleBtn" type="button" value="@( ((Model.ModuleModel.Module != null) ? "Spara ändringar" : "Lägg till") )" class="btn btn-default" />
                            </div>
                        </div>
                    }
                }

                <div id="moduleListDiv">
                    @if (Model.Course != null)
                    {
                        @Html.Action("GetModuleList", new { courseId = Model.Course.Id })
                    }
                </div>
                @if (Model.ModuleModel.Modules != null)
                {
                    if (Model.ModuleModel.Modules.Count > 0)
                    {
                        <div id="addActivity" class="col-md-10">
                            <a data-toggle="collapse" data-parent="#accordion" href="#collapseActivity" class="btn btn-default">Lägg till aktiviteter</a>
                        </div>
                    }
                    else
                    {
                        <div id="addActivity" class="col-md-10 hidden">
                            <a data-toggle="collapse" data-parent="#accordion" href="#collapseActivity" class="btn btn-default">Lägg till aktiviteter</a>
                        </div>
                    }
                }
                else
                {
                    <div id="addActivity" class="col-md-10 hidden">
                        <a data-toggle="collapse" data-parent="#accordion" href="#collapseActivity" class="btn btn-default">Lägg till aktiviteter</a>
                    </div>
                }

            </div>
        </div>
    </div>
    <div class="panel panel-default">
        <a data-toggle="collapse" data-parent="#accordion" href="#collapseActivity" class="accordion-header-link">
            <div class="panel-heading">
                <h4 class="panel-title">
                    Aktiviteter
                </h4>
            </div>
        </a>
        <div id="collapseActivity" class="panel-collapse collapse @Model.ActivityIn">
            <div class="panel-body">
                @using (Html.BeginForm("CreateActivity", "CreateCourse", FormMethod.Post, new { @id = "ActivityForm" }))
                {
                    <div id="activityDiv">
                        @if (Model.Course != null)
                        {
                            @Html.Action("CreateActivityInput", new { courseId = Model.Course.Id })
                        }
                    </div>

                    if (Model.ModuleModel.Modules != null)
                    {
                        if (Model.ModuleModel.Modules.Count > 0)
                        {
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="button" id="ActivityBtn" value="@( ((Model.ActivityModel.Activity != null) ? "Spara ändringar" : "Lägg till") )" class="btn btn-default" />
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="button" id="ActivityBtn" value="@( ((Model.ActivityModel.Activity != null) ? "Spara ändringar" : "Lägg till") )" class="btn btn-default hidden" />
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="button" id="ActivityBtn" value="@( ((Model.ActivityModel.Activity != null) ? "Spara ändringar" : "Lägg till") )" class="btn btn-default hidden" />
                            </div>
                        </div>
                    }
                }

                <div id="activityListDiv">
                    @if (Model.Course != null)
                    {
                        @Html.Action("GetActivityList", new { courseId = Model.Course.Id })
                    }
                </div>

            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/jquery-3.1.1.min.js"></script>
<script>
    $("#createNew").on("click", function () {
        document.getElementById("courseId").value = 0;
        $("#courseForm").submit();
    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).on('change','#ActivityDropDown', function(){
            var row = $('#moduleListDiv').find('tr[name=' + $(this).val() +']');
            activityDatePicker($(row).find('td[class=start-date]').text(), $(row).find('td[class=end-date]').text());
        });

        var datePicker = function(){
            $('.datepicker').datetimepicker({
                locale:'sv',
                format: 'YYYY-MM-DD'
            });
        }
        var activityDatePickerInit = function(){
            $('.activityDatepicker').datetimepicker({
                locale:'sv',
            });
        }
        activityDatePickerInit();

        var activityDatePicker = function(startDate, endDate){
            var list = document.getElementsByClassName('activityDatepicker');

            for(var i = 0; i < list.length; i++){
                $(list[i]).datetimepicker('destroy');
            }

            $('.activityDatepicker').datetimepicker({
                locale:'sv',
                minDate: startDate,
                maxDate: endDate
            });
        }

        function getSelectedText() {
            var elt = document.getElementById('ActivityDropDown');

            if (elt.selectedIndex == -1)
                return null;

            return elt.options[elt.selectedIndex].text;
        }

        datePicker();

        $(document).on('click', '#ModuleBtn', function () {
            $.ajax({
                url: '@Url.Action("CreateModule")',
                type: 'POST',
                data: $('#ModuleForm').serialize(),
                success: function (data) {
                    if (data) {
                        $('#moduleDiv').html(data);
                        datePicker();
                        $('#moduleListDiv').load('@Url.Action("GetModuleList", new { courseId = ((Model.Course != null)? Model.Course.Id : 0) })', hideAddBtn)
                        $('#activityListDiv').load('@Url.Action("GetActivityList", new { courseId = ((Model.Course != null) ? Model.Course.Id : 0) })')
                        $('#activityDiv').load('@Url.Action("CreateActivityInput", new { courseId = ((Model.Course != null) ? Model.Course.Id : 0) })', activityDatePickerInit)
                        document.getElementById("ModuleBtn").value = "Lägg till";
                    }
                    else {
                        alert('NoData');
                    }
                },
                error: function (xhr, textStatus, thrownError, data) {
                    alert("Error: " + thrownError);
                }
            });
        });

        var moduleEdit = function () {
            $(document).on('click', '.editModuleBtn', function () {
                var value = $(this).attr('name');
                $.ajax({
                    url: '@Url.Action("GetEditModule")',
                    type: 'GET',
                    data:{
                        moduleId: value,
                        courseId: @(((Model.Course != null)? Model.Course.Id : 0)),
                    },
                    success: function (data) {
                        if (data) {
                            $('#moduleDiv').html(data);
                            datePicker();
                            $('#activityDiv').load('@Url.Action("CreateActivityInput", new { courseId = ((Model.Course != null) ? Model.Course.Id : 0) })', activityDatePickerInit)
                            document.getElementById("ModuleBtn").value = "Spara ändringar";
                        }
                        else {
                            alert('NoData');
                        }
                    },
                    error: function (xhr, textStatus, thrownError, data) {
                        alert("Error: " + thrownError);
                    }
                });
            });
        }
        moduleEdit();

        var deleteModule = function(){
            $(document).on('click', '.deleteModuleBtn', function () {
                var value = $(this).attr("name");
                $.ajax({
                    url: '@Url.Action("Delete")',
                    type: 'POST',
                    data: {
                        id: value,
                        courseId: @(((Model.Course != null)? Model.Course.Id : 0)),
                    },
                    success: function (data) {
                        if (data) {
                            $('#moduleListDiv').html(data);
                            hideAddBtn();
                            $('#activityDiv').load('@Url.Action("CreateActivityInput", new { courseId = ((Model.Course != null) ? Model.Course.Id : 0) })', activityDatePickerInit)
                            $('#activityListDiv').load('@Url.Action("GetActivityList", new { courseId = ((Model.Course != null) ? Model.Course.Id : 0) })')
                        }
                        else {
                            alert('NoData');
                        }
                    },
                    error: function (xhr, textStatus, thrownError, data) {
                        alert("Error: " + thrownError);
                    }
                });
            });
        }
        deleteModule();

        var deleteActivity = function(){
            $(document).on('click', '.deleteActivityBtn', function () {
                var value = $(this).attr("name");
                $.ajax({
                    url: '@Url.Action("DeleteActivity")',
                    type: 'POST',
                    data: {
                        activityId: value,
                        courseId: @(((Model.Course != null)? Model.Course.Id : 0)),
                    },
                    success: function (data) {
                        if (data) {
                            $('#activityListDiv').html(data);
                            $('#activityDiv').load('@Url.Action("CreateActivityInput", new { courseId = ((Model.Course != null) ? Model.Course.Id : 0) })', activityDatePickerInit)
                            $('#moduleListDiv').load('@Url.Action("GetModuleList", new { courseId = ((Model.Course != null)? Model.Course.Id : 0) })')
                        }
                        else {
                            alert('NoData');
                        }
                    },
                    error: function (xhr, textStatus, thrownError, data) {
                        alert("Error: " + thrownError);
                    }
                });
            });
        }
        deleteActivity();

        var hideAddBtn = function(){
            var list = document.getElementById("moduleListDiv");
            var listSize = list.getElementsByTagName("td").length;
            if(listSize > 1){
                $("#ActivityBtn").removeClass("hidden");
                $('#addActivity').removeClass("hidden");   
            }
            else
            {
                $("#ActivityBtn").addClass("hidden");
                $('#addActivity').addClass("hidden");   
            }
        }

        $(document).on('click', '#ActivityBtn', function () {
            $.ajax({
                url: '@Url.Action("CreateActivity")',
                type: 'POST',
                data: $('#ActivityForm').serialize(),
                success: function (data) {
                    if (data) {
                        $('#activityDiv').html(data);
                        activityDatePickerInit();
                        $('#moduleListDiv').load('@Url.Action("GetModuleList", new { courseId = ((Model.Course != null)? Model.Course.Id : 0) })')
                        $('#activityListDiv').load('@Url.Action("GetActivityList", new { courseId = ((Model.Course != null) ? Model.Course.Id : 0) })')
                        $('#activityListDiv').load('@Url.Action("GetActivityList", new { courseId = ((Model.Course != null) ? Model.Course.Id : 0) })')
                        document.getElementById("ActivityBtn").value = "Lägg till";
                    }
                    else {
                        alert('NoData');
                    }
                },
                error: function (xhr, textStatus, thrownError, data) {
                    alert("Error: " + thrownError);
                }
            });
        });

        var activityEdit = function () {
            $(document).on('click', '.editActivityBtn', function () {
                var value = $(this).attr('name');

                $.ajax({
                    url: '@Url.Action("CreateActivityInput")',
                    type: 'GET',
                    data:{
                        activityId: value,
                        courseId: @(((Model.Course != null)? Model.Course.Id : 0)),
                    },
                    success: function (data) {
                        if (data) {
                            $('#activityDiv').html(data);
                            datePicker();
                            document.getElementById("ActivityBtn").value = "Spara ändringar";
                        }
                        else {
                            alert('NoData');
                        }
                    },
                    error: function (xhr, textStatus, thrownError, data) {
                        alert("Error: " + thrownError);
                    }
                });
            });
        }

        activityEdit();
    </script>
}
